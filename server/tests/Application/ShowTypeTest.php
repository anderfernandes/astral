<?php

namespace App\Tests\Application;

use App\Tests\BaseWebTestCase;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\HttpException;

class ShowTypeTest extends BaseWebTestCase
{
    private array $showType;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->showType = [
            'name' => 'Another Test Show Type',
            'description' => 'Yet another show type created for testing purposes',
            'isActive' => true,
        ];
    }

    public function testIndex(): void
    {
        $this->client->request('GET', '/show-types');

        $this->assertResponseIsSuccessful();
    }

    public function testCreate(): void
    {
        $this->client->loginUser($this->user);

        $this->client->request('POST', '/show-types', $this->showType);

        $this->assertResponseIsSuccessful();
    }

    public function testCreateWithBadData(): void
    {
        $this->client->loginUser($this->user);

        $this->client->catchExceptions(false);
        $this->expectException(HttpException::class);

        $this->client->request('POST', '/show-types', [
            'test' => 'test',
        ]);

        $this->assertResponseIsUnprocessable();
    }

    public function testShow(): void
    {
        $this->client->loginUser($this->user);

        $this->client->request('POST', '/show-types', $this->showType);

        $id = json_decode($this->client->getResponse()->getContent())->data;

        $this->client->request('GET', "/show-types/$id");

        $this->assertResponseIsSuccessful();
    }

    public function testShowWithBadId(): void
    {
        $this->client->catchExceptions(false);
        $this->expectException(HttpException::class);

        $this->client->request('GET', '/show-types/99');

        $this->assertResponseStatusCodeSame(Response::HTTP_NOT_FOUND);
    }

    public function testUpdate()
    {
        $this->client->loginUser($this->user);

        $this->client->request('POST', '/show-types', $this->showType);

        $this->client->request('PUT', '/show-types/2', [
            'name' => 'Changed Show Type',
            'description' => 'Changed show description',
            'isActive' => false,
        ]);

        $this->assertResponseIsSuccessful();
    }

    public function testUpdateWithBadData(): void
    {
        $this->client->loginUser($this->user);

        $this->client->catchExceptions(false);
        $this->expectException(HttpException::class);

        $this->client->request('POST', '/show-types', $this->showType);

        $this->client->request('PUT', '/show-types/2', []);

        $this->assertResponseIsSuccessful();
    }
}
