<?php

namespace App\Tests\Application;

use App\Tests\BaseWebTestCase;
use Symfony\Component\DomCrawler\Crawler;
use Symfony\Component\HttpFoundation\Response;

class AccountTest extends BaseWebTestCase
{
    private array $registeredUser = [];

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $faker = \Faker\Factory::create();

        $password = $faker->realTextBetween(6, 12);
        $email = $faker->email();

        $this->registeredUser = [
            'email' => $email,
            'emailConfirmation' => $email,
            'password' => $password,
            'passwordConfirmation' => $password,
            'firstName' => $faker->firstName(),
            'lastName' => $faker->lastName(),
            'address' => $faker->streetAddress(),
            'city' => $faker->city(),
            'state' => 'Texas',
            'zip' => $faker->randomNumber(5),
            'country' => $faker->country(),
            'phone' => $faker->phoneNumber(),
            'dateOfBirth' => $faker->date(),
        ];
    }

    public function testRegister()
    {
        $this->client->request('POST', '/register', $this->registeredUser);

        $this->assertResponseIsSuccessful();
    }

    public function testLogin()
    {
        $this->client->request('POST', '/register', $this->registeredUser);

        $this->client->request('POST', '/login', [
            'email' => $this->registeredUser['email'],
            'password' => $this->registeredUser['password'],
        ]);

        $this->assertResponseIsSuccessful();
    }

    public function testLoginWithBadCredentials()
    {
        $this->client->request('POST', '/register', $this->registeredUser);

        $this->client->request('POST', '/login', [
            'email' => $this->registeredUser['email'],
            'password' => $this->registeredUser['firstName'],
        ]);

        $this->assertResponseStatusCodeSame(Response::HTTP_UNAUTHORIZED);
    }

    public function testShow()
    {
        $this->client->request('POST', '/register', $this->registeredUser);

        $this->client->request('POST', '/login', [
            'email' => $this->registeredUser['email'],
            'password' => $this->registeredUser['password'],
        ]);

        $this->client->request('GET', '/account');

        $this->assertResponseIsSuccessful();
    }

    public function testShowWithoutLogin()
    {
        $this->client->request('POST', '/logout');

        $this->client->request('GET', '/account');

        $this->assertResponseStatusCodeSame(Response::HTTP_UNAUTHORIZED);
    }

    public function testActivation()
    {
        $this->client->request('POST', '/register', $this->registeredUser);

        $email = $this->getMailerMessage()->getHtmlBody();

        $crawler = new Crawler($email);

        $uri = $crawler->filter('a.button')->last()->link()->getUri();

        $this->client->request('GET', $uri);

        $this->assertResponseIsSuccessful();
    }

    public function testActivationWithBadToken()
    {
        $this->client->request('POST', '/register', $this->registeredUser);

        $token = sha1($this->registeredUser['email']);

        $this->client->request('GET', "/activate?token=$token");

        $this->assertResponseStatusCodeSame(Response::HTTP_BAD_REQUEST);
    }

    public function testLogout()
    {
        $this->client->request('POST', '/register', $this->registeredUser);

        $this->client->request('POST', '/login', [
            'email' => $this->registeredUser['email'],
            'password' => $this->registeredUser['password'],
        ]);

        $this->client->request('POST', '/logout');

        $this->assertResponseStatusCodeSame(Response::HTTP_OK);
    }

    public function testLogoutWithoutLogin()
    {
        $this->client->request('POST', '/logout');
        
        $this->client->request('POST', '/register', $this->registeredUser);

        $this->client->request('POST', '/logout');

        $this->assertResponseStatusCodeSame(Response::HTTP_BAD_REQUEST);
    }

    public function testUpdate()
    {
        $this->client->request('POST', '/register', $this->registeredUser);

        $this->client->request('POST', '/login', [
            'email' => $this->registeredUser['email'],
            'password' => $this->registeredUser['password'],
        ]);

        $this->client->request('PUT', '/account/update', [
            ...$this->registeredUser,
            'address' => $faker = \Faker\Factory::create()->address(),
        ]);

        $this->assertResponseIsSuccessful();
    }

    public function testForgot()
    {
        $this->client->request('POST', '/register', $this->registeredUser);

        $this->client->request('POST', '/forgot', [
            'email' => $this->registeredUser['email'],
        ]);

        $email = $this->getMailerMessage()->getHtmlBody();

        $crawler = new Crawler($email);

        $uri = $crawler->filter('a.button')->last()->link()->getUri();

        $password = $faker = \Faker\Factory::create()->password();

        $this->client->request('POST', $uri, [
            'password' => $password,
            'passwordConfirmation' => $password,
        ]);

        $this->assertResponseIsSuccessful();
    }

    public function testForgotWithoutEmail()
    {
        $this->client->request('POST', '/forgot', [
            'email' => $this->registeredUser['email'],
        ]);

        $this->assertResponseStatusCodeSame(Response::HTTP_BAD_REQUEST);
    }
}
